server:
  port: ${PORT:8080} # Uses Render's assigned port, defaults to 8080 locally
  ssl:
    key-store: eatsadvisor.p12
    key-store-password: password
    key-store-type: PKCS12
    key-alias: eatsadvisor
    enabled: true

spring:
  main:
    allow-bean-definition-overriding: true

  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_OAUTH_CLIENT_ID}
            client-secret: ${GOOGLE_OAUTH_CLIENT_SECRET}
            scope: openid, profile, email
            authorization-grant-type: authorization_code
            redirect-uri: "${BACKEND_BASE_URL}/login/oauth2/code/google" # Dynamically set base URL
            client-authentication-method: basic
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://openidconnect.googleapis.com/v1/userinfo
            jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs
            user-name-attribute: email

      resourceserver:
        jwt:
          issuer-uri: https://accounts.google.com
          jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs

jwt:
  secret: ${JWT_SECRET} # Secret key for JWT signing

openai:
  api-key: ${OPENAI_API_KEY} # OpenAI API key

logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG

app:
  backend-base-url: ${BACKEND_BASE_URL:https://localhost:8080} # Defaults to localhost but uses Render's URL in production
  frontend-base-url: ${FRONTEND_BASE_URL:https://localhost:3001} # Frontend URL (defaults to localhost:3000)
